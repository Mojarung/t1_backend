"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AI-–ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /candidate-selection/ai-search
"""

import requests
import json
import os
from typing import Optional

def load_jwt_token() -> Optional[str]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω.
    –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /auth/login
    ""sd"
    token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJzdHJpbmciLsdCJleHAiOjE3NTg0NDEyMjd9.Xs28sKBJRv86_dw1tJmudBg-A2Q2dp5-xSIKOCOLhBQ"
    if not token:
        print("‚ö†Ô∏è  JWT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:")
        print("   1. POST /auth/login —Å credentials HR –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("   2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ access_token –∏–∑ –æ—Ç–≤–µ—Ç–∞")
        print("   3. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ: export JWT_TOKEN='your-token-here'")
        return None
    return token

def test_ai_candidate_search(base_url: str = "http://localhost:8000"):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI-–ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    jwt_token = load_jwt_token()
    if not jwt_token:
        print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç –±–µ–∑ JWT —Ç–æ–∫–µ–Ω–∞")
        return
    
    headers = {
        "Authorization": f"Bearer {jwt_token}",
        "Content-Type": "application/json"
    }
    
    endpoint = f"{base_url}/candidate-selection/ai-search"
    
    # –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    test_cases = [
        {
            "name": "üêç Python Backend Developer",
            "request": {
                "job_title": "Senior Python Developer",
                "job_description": "–ò—â–µ–º –æ–ø—ã—Ç–Ω–æ–≥–æ Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Django, PostgreSQL, Docker. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—ã—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ REST API, —Ä–∞–±–æ—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ –∏ –∑–Ω–∞–Ω–∏–µ –æ—Å–Ω–æ–≤ DevOps.",
                "required_skills": ["Python", "Django"],
                "additional_requirements": "–û–ø—ã—Ç —Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏ –∏ Docker –±—É–¥–µ—Ç –±–æ–ª—å—à–∏–º –ø–ª—é—Å–æ–º",
                "experience_level": "senior",
                "max_candidates": 10,
                "threshold_filter_limit": 40
            }
        },
        {
            "name": "üìä Data Analyst", 
            "request": {
                "job_title": "Data Analyst",
                "job_description": "–ù—É–∂–µ–Ω –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏. SQL, Python, —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∏ –¥–∞—à–±–æ—Ä–¥–æ–≤.",
                "required_skills": ["SQL", "Python"],
                "additional_requirements": "–û–ø—ã—Ç —Å Power BI, Tableau –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏",
                "experience_level": "middle", 
                "max_candidates": 15
            }
        },
        {
            "name": "‚öõÔ∏è React Frontend Developer",
            "request": {
                "job_title": "React Frontend Developer", 
                "job_description": "Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö SPA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. React, TypeScript, Redux, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                "required_skills": ["React", "JavaScript"],
                "additional_requirements": "–ó–Ω–∞–Ω–∏–µ TypeScript –∏ –æ–ø—ã—Ç —Å state management",
                "experience_level": "middle",
                "max_candidates": 12
            }
        }
    ]
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI-–ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...\n")
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"{'='*60}")
        print(f"üß™ –¢–µ—Å—Ç {i}: {test_case['name']}")
        print(f"{'='*60}")
        
        print(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {test_case['request']['job_title']}")
        print(f"üéØ –ù–∞–≤—ã–∫–∏: {', '.join(test_case['request']['required_skills'])}")
        print(f"‚öôÔ∏è  –ú–∞–∫—Å. –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {test_case['request'].get('max_candidates', 20)}")
        print("\nüîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
        
        try:
            response = requests.post(endpoint, headers=headers, json=test_case['request'], timeout=30)
            
            print(f"üì° Status: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {result['processed_by_ai']}")
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processing_time_seconds', 'N/A')}s")
                print(f"üîç –§–∏–ª—å—Ç—Ä—ã: {', '.join(result.get('filters_applied', []))}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                candidates = result.get('candidates', [])[:3]
                if candidates:
                    print(f"\nüë• –¢–æ–ø-{len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç(–æ–≤):")
                    for j, candidate in enumerate(candidates, 1):
                        print(f"\n  {j}. {candidate['full_name']} (–û—Ü–µ–Ω–∫–∞: {candidate['match_score']})")
                        print(f"     üìß {candidate['email']}")
                        print(f"     üè¢ {candidate.get('current_position', '–ü–æ–∑–∏—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
                        print(f"     üõ†Ô∏è  –ù–∞–≤—ã–∫–∏: {', '.join(candidate.get('programming_languages', [])[:3])}")
                        print(f"     ü§ñ AI-—Å–∞–º–º–∞—Ä–∏: {candidate['ai_summary'][:120]}...")
                        if candidate.get('strengths'):
                            print(f"     üí™ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {', '.join(candidate['strengths'][:2])}")
                else:
                    print("\n‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
            elif response.status_code == 401:
                print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ JWT —Ç–æ–∫–µ–Ω")
                break
            elif response.status_code == 403:
                print("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è HR –ø—Ä–∞–≤–∞")
                break
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"   –î–µ—Ç–∞–ª–∏: {error_detail.get('detail', 'Unknown error')}")
                except:
                    print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}")
                    
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        print("\n" + "‚îÄ" * 60 + "\n")
    
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –°–æ–≤–µ—Ç—ã:")
    print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ vec_profiles")
    print("   ‚Ä¢ –î–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
    """
    print("ü§ñ AI HR Assistant - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    print("="*60)
    
    # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–∑–æ–≤—ã–π URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å—Ä–µ–¥–∞—Ö
    base_url = os.getenv('API_BASE_URL', 'http://localhost:8000')
    print(f"üåê API URL: {base_url}")
    
    test_ai_candidate_search(base_url)

if __name__ == "__main__":
    main()
