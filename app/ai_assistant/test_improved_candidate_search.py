"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ AI-–ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã
"""

import requests
import json
import os
from typing import Optional

def load_jwt_token() -> Optional[str]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    """
    token = os.getenv('JWT_TOKEN')
    if not token:
        print("‚ö†Ô∏è  JWT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("   1. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth/login")
        print("   2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ access_token")
        print("   3. export JWT_TOKEN='your-token'")
        return None
    return token

def test_improved_search(base_url: str = "http://localhost:8000"):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π AI-–ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    """
    
    jwt_token = load_jwt_token()
    if not jwt_token:
        print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç –±–µ–∑ JWT —Ç–æ–∫–µ–Ω–∞")
        return
    
    headers = {
        "Authorization": f"Bearer {jwt_token}",
        "Content-Type": "application/json"
    }
    
    endpoint = f"{base_url}/candidate-selection/ai-search"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –±–æ–ª–µ–µ –≥–∏–±–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    test_cases = [
        {
            "name": "üîç –û–±—â–∏–π –ø–æ–∏—Å–∫ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤",
            "description": "–ò—â–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –Ω–∞–≤—ã–∫–∞–º",
            "request": {
                "job_title": "IT –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
                "job_description": "–ò—â–µ–º IT —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è –ª—é–±–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç.",
                "required_skills": [],  # –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                "max_candidates": 20,
                "threshold_filter_limit": 100
            }
        },
        {
            "name": "üêç Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (–º—è–≥–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)",
            "description": "–ü–æ–∏—Å–∫ —Å –æ–¥–Ω–∏–º –Ω–∞–≤—ã–∫–æ–º, –Ω–æ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏",
            "request": {
                "job_title": "Python Developer",
                "job_description": "–ù—É–∂–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Python. –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ –ª—é–±–æ–π - –æ—Ç –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ –¥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞.",
                "required_skills": ["Python"],
                "max_candidates": 15,
                "threshold_filter_limit": 50
            }
        },
        {
            "name": "üìä Data Scientist",
            "description": "–ü–æ–∏—Å–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ –¥–∞–Ω–Ω—ã–º —Å —à–∏—Ä–æ–∫–∏–º —Å–ø–µ–∫—Ç—Ä–æ–º –Ω–∞–≤—ã–∫–æ–≤",
            "request": {
                "job_title": "Data Scientist", 
                "job_description": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö. –ù—É–∂–Ω—ã –∑–Ω–∞–Ω–∏—è Python, SQL, –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
                "required_skills": ["Python", "SQL"],
                "additional_requirements": "–û–ø—ã—Ç —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º, pandas, numpy",
                "experience_level": "middle",
                "max_candidates": 10
            }
        },
        {
            "name": "üåü Senior —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
            "description": "–ü–æ–∏—Å–∫ –æ–ø—ã—Ç–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
            "request": {
                "job_title": "Senior Software Developer",
                "job_description": "–ò—â–µ–º –æ–ø—ã—Ç–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤. –ù—É–∂–µ–Ω –æ–ø—ã—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.",
                "required_skills": [],
                "experience_level": "senior",
                "additional_requirements": "–û–ø—ã—Ç –ª–∏–¥–µ—Ä—Å—Ç–≤–∞, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –Ω–∞–≤—ã–∫–∏",
                "max_candidates": 8
            }
        },
        {
            "name": "üöÄ –°—Ç–∞—Ä—Ç–∞–ø —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
            "description": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞",
            "request": {
                "job_title": "Full-Stack Developer",
                "job_description": "–ò—â–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞. –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏, –±—ã—Å—Ç—Ä–æ –æ–±—É—á–∞—Ç—å—Å—è.",
                "required_skills": ["JavaScript"],
                "additional_requirements": "–ì–∏–±–∫–æ—Å—Ç—å, –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ–±—É—á–µ–Ω–∏—é, —Å—Ç–∞—Ä—Ç–∞–ø –æ–ø—ã—Ç",
                "max_candidates": 12
            }
        }
    ]
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI-–ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
    print(f"üåê API: {endpoint}")
    print("=" * 80)
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüß™ –¢–ï–°–¢ {i}: {test_case['name']}")
        print("‚îÄ" * 60)
        print(f"üìù {test_case['description']}")
        
        request_data = test_case['request']
        print(f"\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print(f"   ‚Ä¢ –í–∞–∫–∞–Ω—Å–∏—è: {request_data['job_title']}")
        print(f"   ‚Ä¢ –ù–∞–≤—ã–∫–∏: {request_data.get('required_skills', [])}")
        print(f"   ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {request_data.get('experience_level', '–ª—é–±–æ–π')}")
        print(f"   ‚Ä¢ –ú–∞–∫—Å. –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {request_data.get('max_candidates', 20)}")
        
        print(f"\nüîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
        
        try:
            response = requests.post(endpoint, headers=headers, json=request_data, timeout=60)
            
            print(f"üì° HTTP Status: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                
                # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                print(f"‚úÖ –£–°–ü–ï–•!")
                print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {result.get('total_profiles_found', 0)}")
                print(f"   ü§ñ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ AI: {result.get('processed_by_ai', 0)}")
                print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {result.get('processing_time_seconds', 0)}—Å")
                print(f"   üîç –§–∏–ª—å—Ç—Ä—ã: {', '.join(result.get('filters_applied', []))}")
                
                # –î–µ—Ç–∞–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
                candidates = result.get('candidates', [])
                if candidates:
                    print(f"\nüë• –¢–û–ü-{min(len(candidates), 3)} –ö–ê–ù–î–ò–î–ê–¢(–û–í):")
                    for j, candidate in enumerate(candidates[:3], 1):
                        print(f"\n   {j}. {candidate.get('full_name', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')} "
                              f"(‚≠ê {candidate.get('match_score', 0):.2f})")
                        
                        email = candidate.get('email', 'email –Ω–µ —É–∫–∞–∑–∞–Ω')
                        print(f"      üìß {email}")
                        
                        position = candidate.get('current_position')
                        if position:
                            print(f"      üè¢ {position}")
                        
                        exp = candidate.get('experience_years')
                        if exp:
                            print(f"      üìÖ –û–ø—ã—Ç: {exp}")
                        
                        # –ù–∞–≤—ã–∫–∏
                        prog_langs = candidate.get('programming_languages', [])
                        if prog_langs:
                            print(f"      üíª –Ø–∑—ã–∫–∏: {', '.join(prog_langs[:4])}")
                        
                        skills = candidate.get('key_skills', [])
                        if skills:
                            print(f"      üõ†Ô∏è  –ù–∞–≤—ã–∫–∏: {', '.join(skills[:4])}")
                        
                        # AI –∞–Ω–∞–ª–∏–∑
                        summary = candidate.get('ai_summary', '')
                        if summary:
                            print(f"      ü§ñ AI: {summary[:150]}...")
                        
                        # –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
                        strengths = candidate.get('strengths', [])
                        if strengths:
                            print(f"      üí™ –°–∏–ª—å–Ω—ã–µ: {', '.join(strengths[:2])}")
                        
                        # –í–µ–∫—Ç–æ—Ä–Ω–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å
                        similarity = candidate.get('similarity_score')
                        if similarity is not None:
                            print(f"      üìà –°—Ö–æ–∂–µ—Å—Ç—å: {similarity:.3f}")
                
                else:
                    print(f"\n‚ùì –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    if result.get('total_profiles_found', 0) > 0:
                        print(f"   üí° –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ AI - –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
                    
            elif response.status_code == 401:
                print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ JWT —Ç–æ–∫–µ–Ω")
                break
            elif response.status_code == 403:
                print("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –Ω—É–∂–Ω—ã HR –ø—Ä–∞–≤–∞")
                break
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"   üìã –î–µ—Ç–∞–ª–∏: {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                except:
                    print(f"   üìã –û—Ç–≤–µ—Ç: {response.text[:300]}")
        
        except requests.Timeout:
            print("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (>60s)")
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        if i < len(test_cases):
            print("\n" + "‚îÄ" * 60)
    
    print("\n" + "=" * 80)
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é 'user'")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π: programming_languages, other_competencies, about")
    print("   ‚Ä¢ –î–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("   ‚Ä¢ –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–∏—Å–∫–µ")
    print("   ‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö LLM API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –ª–æ–≥–∏–∫–∞")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
    """
    print("ü§ñ AI HR Assistant - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    print("=" * 80)
    
    # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_url = os.getenv('API_BASE_URL', 'http://localhost:8000')
    print(f"üåê API URL: {api_url}")
    
    test_improved_search(api_url)

if __name__ == "__main__":
    main()
