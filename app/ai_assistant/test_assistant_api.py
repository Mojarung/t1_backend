"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã AI Assistant API
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
"""

import requests
import json
import os
from typing import Optional

class AIAssistantTester:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI Assistant API
    """
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
        self.jwt_token = None
    
    def login(self, username: str, password: str) -> bool:
        """
        –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
        """
        try:
            response = self.session.post(
                f"{self.base_url}/auth/login",
                json={"username": username, "password": password}
            )
            
            if response.status_code == 200:
                data = response.json()
                self.jwt_token = data["access_token"]
                self.session.headers.update({
                    "Authorization": f"Bearer {self.jwt_token}"
                })
                print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def test_chat_conversation(self):
        """
        –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —á–∞—Ç–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
        """
        print("\n" + "="*60)
        print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")
        print("="*60)
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        test_messages = [
            "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å –≤ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏?",
            "–•–æ—á—É –ø–æ–¥–Ω—è—Ç—å—Å—è –ø–æ –∫–∞—Ä—å–µ—Ä–Ω–æ–π –ª–µ—Å—Ç–Ω–∏—Ü–µ –¥–æ Senior Python Developer",
            "–ü–æ–∫–∞–∂–∏ –º–Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—É—Ä—Å—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è",
            "–ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –º–Ω–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?"
        ]
        
        session_id = None
        
        for i, message in enumerate(test_messages, 1):
            print(f"\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ {i}: {message}")
            
            try:
                request_data = {"message": message}
                if session_id:
                    request_data["session_id"] = session_id
                
                response = self.session.post(
                    f"{self.base_url}/ai-assistant/chat",
                    json=request_data,
                    timeout=30
                )
                
                if response.status_code == 200:
                    data = response.json()
                    session_id = data["session_id"]
                    
                    print(f"ü§ñ –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:")
                    print(f"   {data['response'][:200]}...")
                    
                    if data.get("recommendations"):
                        print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(data['recommendations'])}")
                        for rec in data["recommendations"][:2]:
                            print(f"   ‚Ä¢ {rec.get('title', 'Unknown')}")
                    
                    if data.get("quick_replies"):
                        print(f"‚ö° –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã: {', '.join(data['quick_replies'][:3])}")
                        
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    def test_course_recommendations(self):
        """
        –¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫—É—Ä—Å–æ–≤
        """
        print("\n" + "="*60)
        print("üìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫—É—Ä—Å–æ–≤")
        print("="*60)
        
        try:
            request_data = {
                "goal": "–°—Ç–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏",
                "current_skills": ["Python", "SQL", "Statistics"],
                "preferred_level": "middle",
                "max_recommendations": 5
            }
            
            response = self.session.post(
                f"{self.base_url}/ai-assistant/course-recommendations",
                json=request_data
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤")
                print(f"üìã –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {data['explanation'][:150]}...")
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è: {data.get('estimated_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                
                print(f"\nüìö –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã:")
                for i, course in enumerate(data["courses"], 1):
                    print(f"   {i}. {course['title']} ({course['category']})")
                    print(f"      –£—Ä–æ–≤–µ–Ω—å: {course.get('level', 'N/A')}")
                    print(f"      –ù–∞–≤—ã–∫–∏: {', '.join(course.get('skills', [])[:3])}")
                
                if data.get("learning_path"):
                    print(f"\nüõ§Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—É—Ç—å –∏–∑—É—á–µ–Ω–∏—è:")
                    for i, step in enumerate(data["learning_path"], 1):
                        print(f"   {i}. {step}")
                        
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    def test_career_guidance(self):
        """
        –¢–µ—Å—Ç –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
        """
        print("\n" + "="*60)
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤")
        print("="*60)
        
        try:
            request_data = {
                "question": "–ö–∞–∫ –º–Ω–µ —Å—Ç–∞—Ç—å Team Lead –≤ Python —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ?",
                "current_position": "Middle Python Developer",
                "target_position": "Team Lead Python"
            }
            
            response = self.session.post(
                f"{self.base_url}/ai-assistant/career-guidance",
                json=request_data
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã")
                print(f"üí° –°–æ–≤–µ—Ç: {data['advice'][:200]}...")
                print(f"üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è: {data.get('profile_completeness', 'N/A')}%")
                
                if data.get("action_plan"):
                    print(f"\nüìã –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:")
                    for i, action in enumerate(data["action_plan"], 1):
                        print(f"   {i}. {action}")
                
                if data.get("courses"):
                    print(f"\nüìö –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã:")
                    for course in data["courses"][:3]:
                        print(f"   ‚Ä¢ {course['title']}")
                
                if data.get("missing_profile_fields"):
                    print(f"\n‚ö†Ô∏è –ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {', '.join(data['missing_profile_fields'])}")
                        
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    def test_courses_catalog(self):
        """
        –¢–µ—Å—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –∫—É—Ä—Å–æ–≤
        """
        print("\n" + "="*60)
        print("üìñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∫—É—Ä—Å–æ–≤")
        print("="*60)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            response = self.session.get(f"{self.base_url}/ai-assistant/courses/categories")
            if response.status_code == 200:
                categories = response.json()["categories"]
                print(f"üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories[:5])}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            response = self.session.get(
                f"{self.base_url}/ai-assistant/courses",
                params={"category": "Backend Development", "limit": 5}
            )
            
            if response.status_code == 200:
                courses = response.json()
                print(f"\nüìö –ù–∞–π–¥–µ–Ω–æ –∫—É—Ä—Å–æ–≤ –ø–æ Backend Development: {len(courses)}")
                
                for course in courses:
                    print(f"   ‚Ä¢ {course['title']} ({course.get('level', 'N/A')} —É—Ä–æ–≤–µ–Ω—å)")
                    if course.get("technologies"):
                        print(f"     –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {', '.join(course['technologies'][:3])}")
                        
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    def test_assistant_stats(self):
        """
        –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        """
        print("\n" + "="*60)
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        print("="*60)
        
        try:
            response = self.session.get(f"{self.base_url}/ai-assistant/stats")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
                print(f"   üí¨ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {data['total_sessions']}")
                print(f"   üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {data['total_messages']}")
                print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–∞–Ω–æ: {data['recommendations_given']}")
                print(f"   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {data['recommendations_completed']}")
                print(f"   üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã: {', '.join(data.get('favorite_topics', []))}")
                        
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    def run_full_test(self, username: str, password: str):
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
        """
        print("ü§ñ AI Assistant API - –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("="*60)
        
        if not self.login(username, password):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        self.test_chat_conversation()
        self.test_course_recommendations() 
        self.test_career_guidance()
        self.test_courses_catalog()
        self.test_assistant_stats()
        
        print("\n" + "="*60)
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("="*60)

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
    """
    # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    base_url = os.getenv("API_BASE_URL", "http://localhost:8000")
    username = os.getenv("TEST_USERNAME")
    password = os.getenv("TEST_PASSWORD")
    
    if not username or not password:
        print("‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   export TEST_USERNAME='your-email@example.com'")
        print("   export TEST_PASSWORD='your-password'")
        print("\n–ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
        username = input("–í–≤–µ–¥–∏—Ç–µ email: ")
        password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
    
    tester = AIAssistantTester(base_url)
    tester.run_full_test(username, password)

if __name__ == "__main__":
    main()
