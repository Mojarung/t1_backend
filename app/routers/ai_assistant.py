"""
AI Assistant Router - API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ —á–∞—Ç–∞
- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã  
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤ –∏ –≤–∞–∫–∞–Ω—Å–∏–π
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
"""

from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session, joinedload
from sqlalchemy import desc, func, or_, String
from typing import List, Optional
from datetime import datetime, timedelta

from app.database import get_db
from app.auth import get_current_user
from app.models import (
    User, ChatSession, ChatMessage, Course, AssistantRecommendation, UserRole
)
from app.schemas import (
    # Chat schemas
    ChatSessionCreate, ChatSessionResponse, ChatMessageResponse,
    AssistantChatRequest, AssistantChatResponse,
    # Specialized schemas
    CourseRecommendationRequest, CourseRecommendationResponse,
    CareerGuidanceRequest, CareerGuidanceResponse,
    CourseResponse, AssistantStatsResponse
)
from app.services.ai_assistant_service import get_ai_assistant_service

router = APIRouter()

@router.post("/chat", response_model=AssistantChatResponse)
async def send_message_to_assistant(
    request: AssistantChatRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
    - –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
    - –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–æ—Å—Ç–µ
    - RAG-–ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏ –∫—É—Ä—Å–æ–≤
    - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è
    """
    try:
        print(f"ü§ñ AI Assistant chat request from user {current_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant_service = get_ai_assistant_service()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = await assistant_service.process_chat_message(request, current_user, db)
        
        return response
        
    except Exception as e:
        print(f"‚ùå AI Assistant error: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
        )

@router.get("/sessions", response_model=List[ChatSessionResponse])
async def get_chat_sessions(
    limit: int = Query(10, ge=1, le=50),
    skip: int = Query(0, ge=0),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üìù –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π —á–∞—Ç–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:
    - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ—Å—Å–∏–∏
    - –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏  
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    - –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
        sessions = db.query(
            ChatSession,
            func.count(ChatMessage.id).label('messages_count')
        ).outerjoin(ChatMessage).filter(
            ChatSession.user_id == current_user.id
        ).group_by(ChatSession.id).order_by(
            desc(ChatSession.last_activity_at)
        ).offset(skip).limit(limit).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        result = []
        for session, messages_count in sessions:
            session_data = ChatSessionResponse(
                id=session.id,
                user_id=session.user_id,
                title=session.title,
                status=session.status,
                context_data=session.context_data,
                last_activity_at=session.last_activity_at,
                created_at=session.created_at,
                updated_at=session.updated_at,
                messages_count=messages_count or 0
            )
            result.append(session_data)
        
        return result
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π: {str(e)}"
        )

@router.get("/sessions/{session_id}/messages", response_model=List[ChatMessageResponse])
async def get_chat_messages(
    session_id: int,
    limit: int = Query(50, ge=1, le=100),
    skip: int = Query(0, ge=0),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üí¨ –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ:
    - –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –û—Ç–≤–µ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞  
    - –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        session = db.query(ChatSession).filter(
            ChatSession.id == session_id,
            ChatSession.user_id == current_user.id
        ).first()
        
        if not session:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–°–µ—Å—Å–∏—è —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = db.query(ChatMessage).filter(
            ChatMessage.session_id == session_id
        ).order_by(ChatMessage.created_at).offset(skip).limit(limit).all()
        
        return messages
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}"
        )

@router.post("/career-guidance", response_model=CareerGuidanceResponse) 
async def get_career_guidance(
    request: CareerGuidanceRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üöÄ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é:
    - –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –Ω–∞–≤—ã–∫–æ–≤
    - –ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è  
    - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
    - –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
    - –°–æ–≤–µ—Ç—ã –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è
    """
    try:
        assistant_service = get_ai_assistant_service()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile_analysis = assistant_service._analyze_user_profile(current_user)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫—É—Ä—Å—ã
        recommended_courses = await assistant_service._recommend_courses(
            current_user, db, goal=request.target_position
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç
        if not profile_analysis["completeness"]["is_complete"]:
            # –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω - —Å–æ–≤–µ—Ç—É–µ–º –¥–æ–∑–∞–ø–æ–ª–Ω–∏—Ç—å
            advice = f"""–î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ "{request.target_position or '–∂–µ–ª–∞–µ–º–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏'}" –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.
            
–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ {profile_analysis['completeness']['percentage']}%. –≠—Ç–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""

            action_plan = [
                "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ",
                "–î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
                "–û–ø–∏—à–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", 
                "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"
            ]
            
            missing_fields_ru = {
                "first_name": "–ò–º—è",
                "last_name": "–§–∞–º–∏–ª–∏—è",
                "about": "–û —Å–µ–±–µ", 
                "location": "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                "programming_languages": "–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                "other_competencies": "–ù–∞–≤—ã–∫–∏",
                "work_experience": "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã",
                "education": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
            }
            
            missing_profile_fields = [
                missing_fields_ru.get(field, field) 
                for field in profile_analysis["completeness"]["missing_fields"]
            ]
            
        else:
            # –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω - –¥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
            current_skills = profile_analysis["skills"]["programming_languages"] + profile_analysis["skills"]["other_competencies"]
            
            advice = f"""–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ {profile_analysis['completeness']['percentage']}%.
            
–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ ({', '.join(current_skills[:5])}) —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–ª–µ–¥—É—é—â–∏–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ "{request.target_position or '—Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è'}"."""

            action_plan = [
                "–ò–∑—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –Ω–∏–∂–µ",
                "–û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –Ω–æ–≤—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –ø–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è",
                "–û—Ç–∫–ª–∏–∫–∞–π—Ç–µ—Å—å –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏",
                "–ü–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è",
                "–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö —Å –Ω–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏"
            ]
            
            missing_profile_fields = []

        return CareerGuidanceResponse(
            advice=advice,
            action_plan=action_plan,
            courses=[CourseResponse(
                id=course.id,
                title=course.title,
                category=course.category,
                description=course.description,
                skills=course.skills,
                technologies=course.technologies,
                level=course.level,
                duration_hours=course.duration_hours,
                search_keywords=course.search_keywords
            ) for course in recommended_courses],
            profile_completeness=profile_analysis["completeness"]["percentage"],
            missing_profile_fields=missing_profile_fields
        )
        
    except Exception as e:
        print(f"‚ùå Career guidance error: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤: {str(e)}"
        )

@router.post("/course-recommendations", response_model=CourseRecommendationResponse)
async def get_course_recommendations(
    request: CourseRecommendationRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üìö –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ü–µ–ª–∏ —Ä–∞–∑–≤–∏—Ç–∏—è,
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—É—Ä—Å—ã —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞.
    
    –ê–ª–≥–æ—Ä–∏—Ç–º:
    - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
    - –ü–æ–¥–±–∏—Ä–∞–µ—Ç –∫—É—Ä—Å—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    - –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∏–∑—É—á–µ–Ω–∏—è
    """
    try:
        assistant_service = get_ai_assistant_service()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤
        recommended_courses = await assistant_service._recommend_courses(
            current_user, db, 
            goal=request.goal,
            limit=request.max_recommendations
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        profile_analysis = assistant_service._analyze_user_profile(current_user)
        current_skills = profile_analysis["skills"]["programming_languages"] + profile_analysis["skills"]["other_competencies"]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
        if recommended_courses:
            explanation = f"""–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ç–µ–∫—É—â–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ ({', '.join(current_skills[:3]) if current_skills else '–Ω–∞–≤—ã–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã'}) –∏ —Ü–µ–ª–∏ "{request.goal or '–æ–±—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ'}", —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–ª–µ–¥—É—é—â–∏–µ –∫—É—Ä—Å—ã.

–û–Ω–∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –æ—Å–≤–æ–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –∏ –¥–æ—Å—Ç–∏—á—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Ü–µ–ª–∏."""
        else:
            explanation = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –æ–±—É—á–µ–Ω–∏—è
        learning_path = [course.title for course in recommended_courses[:3]]
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è
        total_hours = sum(course.duration_hours or 40 for course in recommended_courses)
        estimated_time = f"–ü—Ä–∏–º–µ—Ä–Ω–æ {total_hours} —á–∞—Å–æ–≤ ({total_hours//20} –Ω–µ–¥–µ–ª—å –ø–æ 20 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é)"
        
        return CourseRecommendationResponse(
            courses=[CourseResponse(
                id=course.id,
                title=course.title,
                category=course.category,
                description=course.description,
                skills=course.skills,
                technologies=course.technologies,
                level=course.level,
                duration_hours=course.duration_hours,
                search_keywords=course.search_keywords
            ) for course in recommended_courses],
            explanation=explanation,
            learning_path=learning_path,
            estimated_time=estimated_time
        )
        
    except Exception as e:
        print(f"‚ùå Course recommendations error: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫—É—Ä—Å–æ–≤: {str(e)}"
        )

@router.get("/courses", response_model=List[CourseResponse])
async def get_available_courses(
    category: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫—É—Ä—Å–∞"),
    level: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é (junior, middle, senior)"),
    search: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"),
    limit: int = Query(20, ge=1, le=100),
    skip: int = Query(0, ge=0),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üìñ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:
    - –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (Backend Development, Frontend Development, etc.)
    - –ü–æ —É—Ä–æ–≤–Ω—é (junior, middle, senior)
    - –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    """
    try:
        query = db.query(Course).filter(Course.is_active == True)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if category:
            query = query.filter(Course.category == category)
        
        if level:
            query = query.filter(Course.level == level)
        
        if search:
            # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            search_filter = or_(
                Course.title.ilike(f"%{search}%"),
                Course.description.ilike(f"%{search}%"),
                Course.search_keywords.cast(String).ilike(f"%{search}%")
            )
            query = query.filter(search_filter)
        
        courses = query.offset(skip).limit(limit).all()
        
        return courses
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {str(e)}"
        )

@router.get("/stats", response_model=AssistantStatsResponse)
async def get_assistant_stats(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º:
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    - –í—ã–¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    - –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–æ–≤
    """
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_sessions = db.query(ChatSession).filter(
            ChatSession.user_id == current_user.id
        ).count()
        
        total_messages = db.query(ChatMessage).join(ChatSession).filter(
            ChatSession.user_id == current_user.id,
            ChatMessage.role == "user"  # –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ).count()
        
        recommendations_given = db.query(AssistantRecommendation).filter(
            AssistantRecommendation.user_id == current_user.id
        ).count()
        
        recommendations_completed = db.query(AssistantRecommendation).filter(
            AssistantRecommendation.user_id == current_user.id,
            AssistantRecommendation.status == "completed"
        ).count()
        
        # TODO: –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–µ–º –≤–æ–ø—Ä–æ—Å–æ–≤
        favorite_topics = ["–ö–∞—Ä—å–µ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏", "–ö—É—Ä—Å—ã"]
        
        return AssistantStatsResponse(
            total_sessions=total_sessions,
            total_messages=total_messages,
            recommendations_given=recommendations_given,
            recommendations_completed=recommendations_completed,
            favorite_topics=favorite_topics
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        )

@router.delete("/sessions/{session_id}")
async def delete_chat_session(
    session_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é —á–∞—Ç–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
    
    –£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é —á–∞—Ç–∞ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        session = db.query(ChatSession).filter(
            ChatSession.id == session_id,
            ChatSession.user_id == current_user.id
        ).first()
        
        if not session:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–°–µ—Å—Å–∏—è —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é (—Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è cascade)
        db.delete(session)
        db.commit()
        
        return {"message": "–°–µ—Å—Å–∏—è —á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"}
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}"
        )

@router.get("/courses/categories")
async def get_course_categories(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üìÇ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫—É—Ä—Å–æ–≤
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫—É—Ä—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    """
    try:
        categories = db.query(Course.category).filter(
            Course.is_active == True
        ).distinct().all()
        
        return {"categories": [category[0] for category in categories]}
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}"
        )
