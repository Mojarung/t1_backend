from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session, joinedload
from app.database import get_db
from app.models import Interview, Resume, Vacancy, User, ApplicationStatus
from app.auth import get_current_hr_user
from app.services.candidate_selection_service import get_candidate_selection_service
from app.services.hr_candidate_search_service import get_hr_candidate_search_service
from app.schemas import CandidateSearchRequest, CandidateSearchResponse
from pydantic import BaseModel
from typing import List, Optional
from datetime import datetime

router = APIRouter()

class CandidateRanking(BaseModel):
    candidate_id: int
    candidate_name: str
    resume_id: int
    interview_id: int
    ranking_score: float
    reasoning: str
    interview_summary: Optional[str] = None

class CandidateSelectionResponse(BaseModel):
    vacancy_id: int
    vacancy_title: str
    total_candidates: int
    ranked_candidates: List[CandidateRanking]

@router.get("/vacancies")
async def get_vacancies_with_completed_interviews(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_hr_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é (—Å summary)
        vacancies = db.query(Vacancy).join(Interview).filter(
            Interview.summary.isnot(None),
            Interview.summary != ""
        ).distinct().all()
        
        result = []
        for vacancy in vacancies:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
            completed_interviews_count = db.query(Interview).filter(
                Interview.vacancy_id == vacancy.id,
                Interview.summary.isnot(None),
                Interview.summary != ""
            ).count()
            
            result.append({
                "id": vacancy.id,
                "title": vacancy.title,
                "company": vacancy.company or "–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞",
                "completed_interviews_count": completed_interviews_count
            })
        
        return result
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π: {str(e)}"
        )

@router.post("/select-best/{vacancy_id}")
async def select_best_candidates(
    vacancy_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_hr_user)
):
    """–í—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
        vacancy = db.query(Vacancy).filter(Vacancy.id == vacancy_id).first()
        if not vacancy:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        interviews = db.query(Interview).options(
            joinedload(Interview.resume).joinedload(Resume.user)
        ).filter(
            Interview.vacancy_id == vacancy_id,
            Interview.summary.isnot(None),
            Interview.summary != ""
        ).all()
        
        if not interviews:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ü–æ –¥–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é"
            )
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò
        vacancy_data = {
            "title": vacancy.title,
            "description": vacancy.description or "",
            "requirements": vacancy.requirements or "",
            "company": vacancy.company or "",
            "experience_level": vacancy.experience_level or "",
            "employment_type": vacancy.employment_type or "",
            "salary_from": vacancy.salary_from,
            "salary_to": vacancy.salary_to
        }
        
        candidates_data = []
        for interview in interviews:
            candidate = interview.resume.user
            candidate_data = {
                "candidate_id": candidate.id,
                "candidate_name": candidate.full_name or f"{candidate.first_name or ''} {candidate.last_name or ''}".strip() or candidate.username,
                "resume_id": interview.resume_id,
                "interview_id": interview.id,
                "interview_summary": interview.summary,
                "candidate_skills": [],
                "candidate_experience": getattr(candidate, 'work_experience', []) or [],
                "candidate_education": getattr(candidate, 'education', []) or []
            }
            candidates_data.append(candidate_data)
        
        # –í—ã–∑—ã–≤–∞–µ–º –ò–ò –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        service = get_candidate_selection_service()
        ai_response = await service.rank_candidates_with_ai(vacancy_data, candidates_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        ranked_candidates = []
        for candidate_data in ai_response.get("ranked_candidates", []):
            ranked_candidates.append(CandidateRanking(
                candidate_id=candidate_data["candidate_id"],
                candidate_name=candidate_data["candidate_name"],
                resume_id=candidate_data["resume_id"],
                interview_id=candidate_data["interview_id"],
                ranking_score=candidate_data["ranking_score"],
                reasoning=candidate_data["reasoning"],
                interview_summary=candidate_data.get("interview_summary")
            ))
        
        return CandidateSelectionResponse(
            vacancy_id=vacancy_id,
            vacancy_title=vacancy.title,
            total_candidates=len(ranked_candidates),
            ranked_candidates=ranked_candidates
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {str(e)}"
        )

@router.post("/ai-search", response_model=CandidateSearchResponse)
async def ai_candidate_search(
    request: CandidateSearchRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_hr_user)
):
    """
    ü§ñ AI-–ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è HR-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
    
    –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ä–µ–∞–ª–∏–∑—É–µ—Ç —É–º–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:
    - –ë–∞–∑–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –Ω–∞–≤—ã–∫–∞–º –∏ –æ–ø—ã—Ç—É
    - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤  
    - –í–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    - LLM-–∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–∞–º–º–∞—Ä–∏
    
    –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:
    1. HR –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    2. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –Ω–∞–≤—ã–∫–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, Python –¥–ª—è –±—ç–∫–µ–Ω–¥–∞)
    3. –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ > threshold_filter_limit, –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –¥–æ–ø. —Ñ–∏–ª—å—Ç—Ä—ã
    4. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º (cosine similarity)
    5. LLM –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ø-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —Å–∞–º–º–∞—Ä–∏
    6. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    - "–ò—â—É Senior Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –æ–ø—ã—Ç–æ–º –≤ Django"
    - "–ù—É–∂–µ–Ω Data Analyst —Å–æ –∑–Ω–∞–Ω–∏–µ–º SQL –∏ Power BI"
    - "Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ React –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø –ø—Ä–æ–µ–∫—Ç–∞"
    """
    try:
        print(f"üîç AI Candidate Search request from HR user: {current_user.username}")
        print(f"üìã Job: {request.job_title}")
        print(f"üéØ Required skills: {request.required_skills}")
        print(f"‚öôÔ∏è Max candidates for AI processing: {request.max_candidates}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        search_service = get_hr_candidate_search_service()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        search_result = await search_service.search_candidates(db, request)
        
        print(f"‚úÖ Search completed: {search_result.processed_by_ai} candidates analyzed")
        print(f"‚è±Ô∏è Processing time: {search_result.processing_time_seconds}s")
        
        return search_result
        
    except Exception as e:
        print(f"‚ùå AI candidate search error: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ AI: {str(e)}"
        )

