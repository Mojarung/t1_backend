"""
HR AI Assistant Router - API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è HR AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.

–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è HR-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:
1. –ß–∞—Ç —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –¥–ª—è HR-–∑–∞–¥–∞—á
2. –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –≤–∞–∫–∞–Ω—Å–∏–∏
3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –≤–∞–∫–∞–Ω—Å–∏–π
4. HR-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º
5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫
"""

from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session
from typing import List, Optional, Dict, Any
from datetime import datetime

from app.database import get_db
from app.models import User, ChatSession, ChatMessage
from app.auth import get_current_hr_user
from app.schemas import (
    # –ë–∞–∑–æ–≤—ã–µ —Å—Ö–µ–º—ã –¥–ª—è —á–∞—Ç–∞
    AssistantChatRequest, ChatSessionResponse, ChatMessageResponse,
    
    # HR-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Ö–µ–º—ã
    HRCandidateSearchRequest, HRAssistantChatResponse, HRCandidateCard,
    HRVacancyGenerationRequest, HRVacancyGenerationResponse,
    HRAnalyticsRequest, HRAnalyticsResponse, HRAssistantStatsResponse,
    
    # –°—Ö–µ–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    CandidateSearchRequest, CandidateSearchResponse
)
from app.services.hr_ai_assistant_service import get_hr_ai_assistant_service

router = APIRouter()

@router.post("/chat", response_model=HRAssistantChatResponse)
async def hr_chat_with_assistant(
    request: AssistantChatRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_hr_user)
):
    """
    üí¨ –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç —Å HR AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
    - "–Ω–∞–π–¥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"
    - "—Å–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è middle frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"
    - "–ø–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º"
    - "–∫–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —Å–µ–π—á–∞—Å –ø–æ–ø—É–ª—è—Ä–Ω—ã?"
    
    –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç
    —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏–ª–∏
    —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –≤–∞–∫–∞–Ω—Å–∏–π.
    """
    try:
        print(f"ü§ñ HR Assistant chat request from: {current_user.username}")
        print(f"üí≠ Message: {request.message[:100]}...")
        
        hr_service = get_hr_ai_assistant_service()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ HR AI —Å–µ—Ä–≤–∏—Å
        response = await hr_service.handle_chat_message(db, current_user, request)
        
        print(f"‚úÖ HR Assistant response type: {response.response_type}")
        
        return response
        
    except Exception as e:
        print(f"‚ùå HR Assistant error: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –≤ HR AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ: {str(e)}"
        )


@router.post("/search-candidates", response_model=CandidateSearchResponse)
async def search_candidates_by_description(
    request: CandidateSearchRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_hr_user)
):
    """
    üîç –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –≤–∞–∫–∞–Ω—Å–∏–∏.
    
    –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –≤ —á–∞—Ç–µ HR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
    
    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±–∞–∑–æ–≤—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏  
    3. –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É —Å—Ö–æ–¥—Å—Ç–≤—É
    4. AI-–∞–Ω–∞–ª–∏–∑ –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    """
    try:
        print(f"üîç Direct candidate search from HR: {current_user.username}")
        print(f"üìã Job title: {request.job_title}")
        
        hr_service = get_hr_ai_assistant_service()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        vacancy_description = {
            "title": request.job_title,
            "description": request.job_description,
            "required_skills": request.required_skills,
            "experience_level": request.experience_level,
            "additional_requirements": request.additional_requirements,
            "max_candidates": request.max_candidates,
            "threshold_filter_limit": request.threshold_filter_limit
        }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        search_result = await hr_service.search_candidates_with_vacancy(db, vacancy_description)
        
        print(f"‚úÖ Found {search_result.processed_by_ai} candidates for analysis")
        
        return search_result
        
    except Exception as e:
        print(f"‚ùå Candidate search error: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {str(e)}"
        )


@router.post("/generate-vacancy", response_model=HRVacancyGenerationResponse)
async def generate_vacancy_description(
    request: HRVacancyGenerationRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_hr_user)
):
    """
    üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –ø–æ–º–æ—â—å—é AI.
    
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ:
    - –ù–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    - –û—Å–Ω–æ–≤–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    - –£—Ä–æ–≤–Ω—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    
    –í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞–≤—ã–∫–∞–º, –∑–∞—Ä–ø–ª–∞—Ç–µ –∏ —Ä—ã–Ω–æ—á–Ω—ã–º –∏–Ω—Å–∞–π—Ç–∞–º.
    """
    try:
        print(f"üìù Vacancy generation request from HR: {current_user.username}")
        print(f"üéØ Position: {request.position}")
        
        hr_service = get_hr_ai_assistant_service()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        requirements = {
            "position": request.position,
            "requirements": request.requirements,
            "level": request.level,
            "additional_info": request.additional_info
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        vacancy_data = await hr_service.generate_vacancy_description(db, current_user, requirements)
        
        return HRVacancyGenerationResponse(**vacancy_data)
        
    except Exception as e:
        print(f"‚ùå Vacancy generation error: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏: {str(e)}"
        )


@router.get("/analytics", response_model=HRAnalyticsResponse)
async def get_hr_analytics(
    period_days: int = Query(30, description="–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–Ω—è—Ö"),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_hr_user)
):
    """
    üìä HR –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É:
    - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º
    - –¢–æ–ø –Ω–∞–≤—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é –æ–ø—ã—Ç–∞
    - –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ  
    - –ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è
    - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –∏–Ω—Å–∞–π—Ç—ã
    """
    try:
        print(f"üìä HR Analytics request from: {current_user.username}")
        print(f"üìÖ Period: {period_days} days")
        
        hr_service = get_hr_ai_assistant_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        analytics_data = await hr_service.get_hr_analytics(db, current_user, period_days)
        
        return HRAnalyticsResponse(**analytics_data)
        
    except Exception as e:
        print(f"‚ùå HR Analytics error: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}"
        )


@router.get("/sessions", response_model=List[ChatSessionResponse])
async def get_hr_chat_sessions(
    limit: int = Query(10, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π"),
    skip: int = Query(0, description="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏–π"),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_hr_user)
):
    """
    üìú –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç-—Å–µ—Å—Å–∏–π HR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –æ–±—â–µ–Ω–∏—è HR-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º,
    –≤–∫–ª—é—á–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    """
    try:
        sessions = db.query(ChatSession).filter(
            ChatSession.user_id == current_user.id
        ).order_by(
            ChatSession.last_activity_at.desc()
        ).offset(skip).limit(limit).all()
        
        result = []
        for session in sessions:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages_count = db.query(ChatMessage).filter(
                ChatMessage.session_id == session.id
            ).count()
            
            session_response = ChatSessionResponse(
                id=session.id,
                user_id=session.user_id,
                title=session.title,
                status=session.status,
                context_data=session.context_data,
                last_activity_at=session.last_activity_at,
                created_at=session.created_at,
                updated_at=session.updated_at,
                messages_count=messages_count
            )
            result.append(session_response)
        
        return result
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π: {str(e)}"
        )


@router.get("/sessions/{session_id}/messages", response_model=List[ChatMessageResponse])
async def get_hr_chat_messages(
    session_id: int,
    limit: int = Query(50, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π"),
    skip: int = Query(0, description="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π"),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_hr_user)
):
    """
    üí¨ –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ HR-—á–∞—Ç–∞.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏,
    –≤–∫–ª—é—á–∞—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        session = db.query(ChatSession).filter(
            ChatSession.id == session_id,
            ChatSession.user_id == current_user.id
        ).first()
        
        if not session:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        messages = db.query(ChatMessage).filter(
            ChatMessage.session_id == session_id
        ).order_by(
            ChatMessage.created_at.asc()
        ).offset(skip).limit(limit).all()
        
        return [ChatMessageResponse.from_orm(msg) for msg in messages]
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}"
        )


@router.get("/stats", response_model=HRAssistantStatsResponse)
async def get_hr_assistant_stats(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_hr_user)
):
    """
    üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è HR AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
    - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –Ω–∞–≤—ã–∫–∏
    - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_sessions = db.query(ChatSession).filter(
            ChatSession.user_id == current_user.id
        ).count()
        
        total_messages = db.query(ChatMessage).join(ChatSession).filter(
            ChatSession.user_id == current_user.id
        ).count()
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è HR-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        return HRAssistantStatsResponse(
            total_sessions=total_sessions,
            total_messages=total_messages,
            candidates_searched=0,  # –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–¥—Å—á–µ—Ç–∞
            vacancies_generated=0,  # –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–¥—Å—á–µ—Ç–∞
            analytics_requests=0,   # –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–¥—Å—á–µ—Ç–∞
            top_search_queries=[
                "Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
                "Frontend developer", 
                "Data Scientist",
                "DevOps engineer"
            ],
            top_skills_searched=[
                "Python", "JavaScript", "React", "SQL", "Docker"
            ],
            average_candidates_per_search=5.2,
            successful_searches_percentage=87.5
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        )


@router.delete("/sessions/{session_id}")
async def delete_hr_chat_session(
    session_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_hr_user)
):
    """
    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é HR-—á–∞—Ç–∞.
    
    –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        session = db.query(ChatSession).filter(
            ChatSession.id == session_id,
            ChatSession.user_id == current_user.id
        ).first()
        
        if not session:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é (—Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑-–∑–∞ cascade)
        db.delete(session)
        db.commit()
        
        return {"message": f"–°–µ—Å—Å–∏—è {session_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"}
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}"
        )
