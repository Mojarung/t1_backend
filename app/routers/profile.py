from fastapi import APIRouter, Depends, HTTPException, status, UploadFile, File, BackgroundTasks
from sqlalchemy.orm import Session
from typing import Optional, Dict, Any
from app.database import get_db
from app.models import User, WorkExperience
from app.auth import get_current_user
from app.schemas import XPInfoResponse, XPUpdateResponse
from app.services.async_resume_processor import async_resume_processor
from app.services.xp_service import xp_service
from app.services.roadmap_service import get_roadmap_service
from datetime import datetime, date
import os
import shutil
import httpx
import asyncio
import json

router = APIRouter()

@router.post("/analyze-resume")
async def analyze_resume_for_profile(
    file: UploadFile = File(...),
    background_tasks: BackgroundTasks = BackgroundTasks(),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–∞
    upload_dir = "uploads/temp_resumes"
    os.makedirs(upload_dir, exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"profile_{current_user.id}_{timestamp}_{file.filename}"
    file_path = os.path.join(upload_dir, filename)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    try:
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
        )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    background_tasks.add_task(
        analyze_and_fill_profile, 
        current_user.id,
        file_path,
        db
    )
    
    return {"message": "–†–µ–∑—é–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω"}

async def analyze_and_fill_profile(user_id: int, file_path: str, db: Session):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OCR
        ocr_text = await extract_text_with_ocr(file_path)
        if not ocr_text:
            print(f"‚ùå OCR –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ {file_path}")
            return
        
        print(f"‚úÖ OCR –∏–∑–≤–ª–µ–∫ —Ç–µ–∫—Å—Ç: {len(ocr_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ AI
        profile_data = await analyze_resume_with_ai(ocr_text)
        if not profile_data:
            print(f"‚ùå AI –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        print(f"‚úÖ AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª —Ä–µ–∑—é–º–µ: {profile_data}")
        print(f"üîç Skills section: {profile_data.get('skills', {})}")
        print(f"üîç Other competencies: {profile_data.get('skills', {}).get('other_competencies', [])}")
        
        # 3. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update_user_profile(user_id, profile_data, db)
        
        print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")

async def extract_text_with_ocr(file_path: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ OCR —Å–µ—Ä–≤–∏—Å"""
    try:
        ocr_url = os.getenv("OCR_URL", "https://moretech-ocr-b2f79abb7082.herokuapp.com/")
        
        with open(file_path, "rb") as file:
            files = {"file": (os.path.basename(file_path), file, "application/octet-stream")}
            
            async with httpx.AsyncClient(timeout=60.0) as client:
                response = await client.post(ocr_url, files=files)
                
                if response.status_code == 200:
                    result = response.json()
                    return result.get("text", "")
                else:
                    print(f"‚ùå OCR —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code} - {response.text}")
                    return None
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OCR —Å–µ—Ä–≤–∏—Å—É: {e}")
        return None

async def analyze_resume_with_ai(resume_text: str) -> Optional[Dict[str, Any]]:
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ AI –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ
        from app.services.resume_analysis_service import get_resume_analysis_service
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
        service = get_resume_analysis_service()
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è
        profile_data = await service.analyze_resume_for_profile(resume_text)
        
        if profile_data:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª—å
            formatted_data = {
                "first_name": profile_data.get("personal_info", {}).get("first_name") or "‚Äî",
                "last_name": profile_data.get("personal_info", {}).get("last_name") or "‚Äî",
                "phone": profile_data.get("personal_info", {}).get("phone") or "‚Äî",
                "location": profile_data.get("personal_info", {}).get("location") or "‚Äî",
                "about": profile_data.get("personal_info", {}).get("about") or "‚Äî",
                "desired_salary": profile_data.get("professional_info", {}).get("desired_salary"),
                "employment_type": profile_data.get("professional_info", {}).get("employment_type"),
                "ready_to_relocate": profile_data.get("professional_info", {}).get("ready_to_relocate"),
                "programming_languages": profile_data.get("skills", {}).get("programming_languages", []),
                "foreign_languages": profile_data.get("skills", {}).get("foreign_languages", []),
                "other_competencies": profile_data.get("skills", {}).get("other_competencies", []),
                "work_experience": profile_data.get("experience", []),
                "education": profile_data.get("education", [])
            }
            
            return formatted_data
        else:
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—é–º–µ AI: {e}")
        return None


async def update_user_profile(user_id: int, profile_data: Dict[str, Any], db: Session):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ"""
    try:
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        if profile_data.get("first_name") and profile_data["first_name"] != "‚Äî":
            user.first_name = profile_data["first_name"]
        
        if profile_data.get("last_name") and profile_data["last_name"] != "‚Äî":
            user.last_name = profile_data["last_name"]
        
        if profile_data.get("about") and profile_data["about"] != "‚Äî":
            user.about = profile_data["about"]
        
        if profile_data.get("location") and profile_data["location"] != "‚Äî":
            user.location = profile_data["location"]
        
        if profile_data.get("phone") and profile_data["phone"] != "‚Äî":
            user.phone = profile_data["phone"]
        
        if profile_data.get("desired_salary") and profile_data["desired_salary"] > 0:
            user.desired_salary = profile_data["desired_salary"]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if profile_data.get("employment_type"):
            from app.models import EmploymentType
            try:
                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è enum, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
                if isinstance(profile_data["employment_type"], EmploymentType):
                    user.employment_type = profile_data["employment_type"]
                else:
                    user.employment_type = EmploymentType(profile_data["employment_type"])
            except ValueError:
                print(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ employment_type: {profile_data['employment_type']}")
                pass
        
        if profile_data.get("ready_to_relocate") is not None:
            user.ready_to_relocate = profile_data["ready_to_relocate"]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º JSON –ø–æ–ª—è
        if profile_data.get("programming_languages"):
            print(f"üîß Setting programming_languages: {profile_data['programming_languages']}")
            user.programming_languages = profile_data["programming_languages"]
        
        if profile_data.get("foreign_languages"):
            print(f"üîß Setting foreign_languages: {profile_data['foreign_languages']}")
            user.foreign_languages = profile_data["foreign_languages"]
        
        if profile_data.get("other_competencies"):
            print(f"üîß Setting other_competencies: {profile_data['other_competencies']}")
            user.other_competencies = profile_data["other_competencies"]
        
        if profile_data.get("education"):
            user.education = profile_data["education"]
        
        if profile_data.get("work_experience"):
            user.work_experience = profile_data["work_experience"]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        xp_info = xp_service.update_user_xp(user, db)
        print(f"üíé XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {xp_info['old_xp']} -> {xp_info['total_xp']} (+{xp_info['xp_gained']})")
        
        print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        db.rollback()

@router.get("/profile")
async def get_user_profile(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return {
        "id": current_user.id,
        "username": current_user.username,
        "email": current_user.email,
        "first_name": current_user.first_name,
        "last_name": current_user.last_name,
        "phone": current_user.phone,
        "location": current_user.location,
        "about": current_user.about,
        "desired_salary": current_user.desired_salary,
        "ready_to_relocate": current_user.ready_to_relocate,
        "employment_type": current_user.employment_type.value if current_user.employment_type else None,
        "education": current_user.education,
        "work_experience": current_user.work_experience,
        "foreign_languages": current_user.foreign_languages,
        "other_competencies": current_user.other_competencies,
        "programming_languages": current_user.programming_languages,
        "xp": current_user.xp,
        "created_at": current_user.created_at
    }

@router.put("/profile")
async def update_user_profile_manual(
    profile_data: Dict[str, Any],
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
        for field, value in profile_data.items():
            if hasattr(current_user, field) and value is not None:
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è enum –ø–æ–ª–µ–π
                if field == "employment_type" and isinstance(value, str):
                    from app.models import EmploymentType
                    try:
                        setattr(current_user, field, EmploymentType(value))
                    except ValueError:
                        raise HTTPException(
                            status_code=status.HTTP_400_BAD_REQUEST,
                            detail=f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è employment_type: {value}"
                        )
                elif field == "birth_date" and isinstance(value, str):
                    from datetime import datetime
                    try:
                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
                        parsed_date = datetime.fromisoformat(value.replace('Z', '+00:00')).date()
                        setattr(current_user, field, parsed_date)
                    except ValueError:
                        raise HTTPException(
                            status_code=status.HTTP_400_BAD_REQUEST,
                            detail=f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è birth_date: {value}"
                        )
                else:
                    setattr(current_user, field, value)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        xp_info = xp_service.update_user_xp(current_user, db)
        
        return {
            "message": "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
            "xp_info": {
                "total_xp": xp_info["total_xp"],
                "xp_gained": xp_info["xp_gained"],
                "completion_percentage": xp_info["completion_percentage"]
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}"
        )

@router.post("/resume-upload-seen")
async def mark_resume_upload_seen(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ"""
    try:
        current_user.resume_upload_seen = True
        db.commit()
        
        return {"message": "–§–ª–∞–≥ resume_upload_seen —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞: {str(e)}"
        )

@router.post("/resume-upload-skipped")
async def mark_resume_upload_skipped(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∑—é–º–µ"""
    try:
        current_user.resume_upload_skipped = True
        db.commit()
        
        return {"message": "–§–ª–∞–≥ resume_upload_skipped —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞: {str(e)}"
        )

@router.get("/xp", response_model=XPInfoResponse)
async def get_user_xp_info(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        xp_info = xp_service.calculate_user_xp(current_user)
        return {
            "user_id": current_user.id,
            "current_xp": current_user.xp,
            "calculated_xp": xp_info["total_xp"],
            "completion_percentage": xp_info["completion_percentage"],
            "filled_fields": xp_info["filled_fields"],
            "total_fields": xp_info["total_fields"],
            "completion_bonus": xp_info["completion_bonus"],
            "base_xp": xp_info["base_xp"],
            "next_bonus": xp_info["next_bonus"],
            "xp_breakdown": xp_info["xp_breakdown"]
        }
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ XP: {str(e)}"
        )

@router.post("/xp/recalculate", response_model=XPUpdateResponse)
async def recalculate_user_xp(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        xp_info = xp_service.update_user_xp(current_user, db)
        return {
            "message": "XP —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω",
            "old_xp": xp_info["old_xp"],
            "new_xp": xp_info["total_xp"],
            "xp_gained": xp_info["xp_gained"],
            "completion_percentage": xp_info["completion_percentage"]
        }
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ XP: {str(e)}"
        )

'''@router.post("/roadmap/generate")
async def generate_development_roadmap(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–π –∫–∞—Ä—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è (—Ä–æ–∞–¥–º–∞–ø–∞) –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è. –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å 60%+."""
    try:
        service = get_roadmap_service()
        roadmap = await service.generate_for_user(db, current_user)
        return {"roadmap": roadmap}
    except ValueError as ve:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(ve))
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–æ–∞–¥–º–∞–ø–∞: {e}")

@router.get("/roadmap")
async def get_development_roadmap(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    service = get_roadmap_service()
    roadmap = service.get_for_user(db, current_user)
    if not roadmap:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="–†–æ–∞–¥–º–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.")
    return {"roadmap": roadmap}'''