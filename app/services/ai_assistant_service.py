"""
AI Assistant Service - –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
–†–µ–∞–ª–∏–∑—É–µ—Ç RAG-–º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ idea.md

–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è
- –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–π —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è  
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞–≤—ã–∫–∞—Ö
- RAG-–ø–æ–∏—Å–∫ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–π
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—à–∞–≥–æ–≤—ã—Ö –ø–ª–∞–Ω–æ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è
"""

import json
import re
import httpx
import asyncio
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime
from sqlalchemy.orm import Session, joinedload
from sqlalchemy import and_, or_, func, desc

from app.config import settings
from app.models import (
    User, ChatSession, ChatMessage, Course, Vacancy, Vec_profile, 
    AssistantRecommendation, UserRole
)
from app.schemas import (
    AssistantChatRequest, AssistantChatResponse, CourseRecommendationRequest,
    CourseRecommendationResponse, CareerGuidanceRequest, CareerGuidanceResponse,
    RecommendationResponse, CourseResponse, VacancyRecommendationResponse
)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
import numpy as np


class AIAssistantService:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    
    –†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –∏–∑ idea.md:
    - RAG-–º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
    - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤
    - –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    """

    def __init__(self):
        self.provider = "scibox"
        self.embedding_dimension = 1024  # bge-m3 embeddings
        
    def _build_llm_request(self, prompt: str, is_embedding: bool = False) -> tuple[str, Dict[str, str], Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Scibox LLM API.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ chat completion, —Ç–∞–∫ –∏ embeddings.
        """
        system_prompt = (
            "–¢—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏ HR-—ç–∫—Å–ø–µ—Ä—Ç. "
            "–ü–æ–º–æ–≥–∞–µ—à—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º IT-–∫–æ–º–ø–∞–Ω–∏–∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ –∫–∞—Ä—å–µ—Ä–µ, "
            "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—à—å –∫—É—Ä—Å—ã, –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—à—å –ø–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è. "
            "–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –ö–†–ê–¢–ö–û –∏ –ü–û –°–£–©–ï–°–¢–í–£. –ú–∞–∫—Å–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. "
            "–ò—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º."
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ URL –¥–ª—è embeddings –∏ chat
        if is_embedding:
            base_url = getattr(settings, 'scibox_embeddings_base_url', 'https://llm.t1v.scibox.tech/v1')
            api_key = getattr(settings, 'scibox_embeddings_api_key', 'sk-your-api-key-here')
            url = f"{base_url.rstrip('/')}/embeddings"
            payload = {
                "model": "bge-m3",
                "input": prompt
            }
        else:
            base_url = getattr(settings, 'scibox_base_url', 'https://llm.t1v.scibox.tech/v1')
            api_key = getattr(settings, 'scibox_api_key', 'sk-your-api-key-here')
            url = f"{base_url.rstrip('/')}/chat/completions"
            payload = {
                "model": getattr(settings, 'scibox_model', 'Qwen2.5-72B-Instruct-AWQ'),
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt},
                ],
                "max_tokens": 300,  # –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —á–∞—Ç–∞
                "temperature": 0.6,  # –ú–µ–Ω–µ–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ, –±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                "top_p": 0.8,
            }

        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json",
        }
        
        return url, headers, payload

    async def _call_llm(self, prompt: str, is_embedding: bool = False) -> Any:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ LLM API
        """
        url, headers, payload = self._build_llm_request(prompt, is_embedding)

        print(f"ü§ñ AI Assistant LLM Request: {self.provider}")
        print(f"üìç URL: {url}")
        print(f"üìä Type: {'Embedding' if is_embedding else 'Chat'}")

        async with httpx.AsyncClient(timeout=60.0) as client:
            try:
                response = await client.post(url, headers=headers, json=payload)
                response.raise_for_status()
                data = response.json()
                
                if is_embedding:
                    return data["data"][0]["embedding"]
                else:
                    return data["choices"][0]["message"]["content"]
                    
            except httpx.HTTPStatusError as e:
                print(f"‚ùå HTTP Error: {e.response.status_code} - {e.response.text}")
                raise Exception(f"LLM API Error: {e.response.status_code}")
            except Exception as e:
                print(f"‚ùå Request Error: {e}")
                raise Exception(f"LLM Request Failed: {str(e)}")

    def _analyze_user_profile(self, user: User) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
        """
        profile_analysis = {
            "basic_info": {
                "name": user.full_name or f"{user.first_name or ''} {user.last_name or ''}".strip() or user.username,
                "email": user.email,
                "location": user.location,
                "about": user.about
            },
            "skills": {
                "programming_languages": user.programming_languages or [],
                "other_competencies": user.other_competencies or [],
                "total_skills": len((user.programming_languages or []) + (user.other_competencies or []))
            },
            "experience": {
                "work_experience": user.work_experience or [],
                "education": user.education or [],
                "experience_count": len(user.work_experience or [])
            },
            "career": {
                "desired_salary": user.desired_salary,
                "ready_to_relocate": user.ready_to_relocate,
                "employment_type": user.employment_type.value if user.employment_type else None
            },
            "completeness": self._calculate_profile_completeness(user)
        }
        
        return profile_analysis

    def _calculate_profile_completeness(self, user: User) -> Dict[str, Any]:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
        """
        required_fields = {
            "first_name": user.first_name,
            "last_name": user.last_name,
            "about": user.about,
            "location": user.location,
            "programming_languages": user.programming_languages,
            "other_competencies": user.other_competencies,
            "work_experience": user.work_experience,
            "education": user.education
        }
        
        filled_fields = sum(1 for value in required_fields.values() if value)
        total_fields = len(required_fields)
        completeness_percentage = (filled_fields / total_fields) * 100
        
        missing_fields = [
            field for field, value in required_fields.items() 
            if not value
        ]
        
        return {
            "percentage": round(completeness_percentage, 1),
            "filled_fields": filled_fields,
            "total_fields": total_fields,
            "missing_fields": missing_fields,
            "is_complete": completeness_percentage >= 80  # –°—á–∏—Ç–∞–µ–º –ø–æ–ª–Ω—ã–º –ø—Ä–∏ 80%+
        }

    async def _find_relevant_vacancies(self, user: User, db: Session, limit: int = 5) -> List[Tuple[Vacancy, float]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.
        –†–µ–∞–ª–∏–∑—É–µ—Ç RAG-–º–æ–¥–µ–ª—å –∏–∑ idea.md –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π.
        """
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile_text = self._create_user_profile_text(user)
        
        # –ü–æ–ª—É—á–∞–µ–º embedding –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_embedding = await self._call_llm(user_profile_text, is_embedding=True)
        except Exception as e:
            print(f"‚ùå Failed to generate user embedding: {e}")
            return []

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        vacancies = db.query(Vacancy).filter(
            Vacancy.status == "open"
        ).limit(50).all()  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        vacancy_similarities = []
        
        for vacancy in vacancies:
            try:
                # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                vacancy_text = f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy.title}\n–û–ø–∏—Å–∞–Ω–∏–µ: {vacancy.description or ''}\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {vacancy.requirements or ''}\n–ö–æ–º–ø–∞–Ω–∏—è: {vacancy.company or ''}"
                
                # –ü–æ–ª—É—á–∞–µ–º embedding –≤–∞–∫–∞–Ω—Å–∏–∏
                vacancy_embedding = await self._call_llm(vacancy_text, is_embedding=True)
                
                # –í—ã—á–∏—Å–ª—è–µ–º cosine similarity
                similarity = self._cosine_similarity(user_embedding, vacancy_embedding)
                vacancy_similarities.append((vacancy, similarity))
                
            except Exception as e:
                print(f"‚ùå Failed to process vacancy {vacancy.id}: {e}")
                continue

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ö–æ–¥—Å—Ç–≤–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø
        vacancy_similarities.sort(key=lambda x: x[1], reverse=True)
        return vacancy_similarities[:limit]

    def _create_user_profile_text(self, user: User) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        """
        profile_parts = []
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if user.about:
            profile_parts.append(f"–û —Å–µ–±–µ: {user.about}")
        
        # –ù–∞–≤—ã–∫–∏
        if user.programming_languages:
            languages = ', '.join(user.programming_languages)
            profile_parts.append(f"–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: {languages}")
        
        if user.other_competencies:
            competencies = ', '.join(user.other_competencies)
            profile_parts.append(f"–ù–∞–≤—ã–∫–∏ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏: {competencies}")
        
        # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ)
        if user.work_experience:
            for i, exp in enumerate(user.work_experience[:3], 1):
                if isinstance(exp, dict):
                    role = exp.get('role', '')
                    company = exp.get('company', '')
                    if role:
                        profile_parts.append(f"–û–ø—ã—Ç {i}: {role}" + (f" –≤ {company}" if company else ""))
        
        # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        if user.education:
            for i, edu in enumerate(user.education[:2], 1):
                if isinstance(edu, dict):
                    degree = edu.get('degree', '')
                    field = edu.get('field_of_study', '') or edu.get('specialty', '')
                    if degree or field:
                        profile_parts.append(f"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ {i}: {degree} {field}".strip())
        
        profile_text = '. '.join(filter(None, profile_parts))
        
        if not profile_text.strip():
            profile_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username}, –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ"
        
        return profile_text

    def _cosine_similarity(self, vec1: List[float], vec2: List[float]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏"""
        try:
            a = np.array(vec1)
            b = np.array(vec2)
            
            dot_product = np.dot(a, b)
            norm_a = np.linalg.norm(a)
            norm_b = np.linalg.norm(b)
            
            if norm_a == 0 or norm_b == 0:
                return 0.0
            
            similarity = dot_product / (norm_a * norm_b)
            return float(similarity)
        except Exception:
            return 0.0

    async def _recommend_courses(self, user: User, db: Session, goal: Optional[str] = None, limit: int = 5) -> List[Course]:
        """
        –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –∫—É—Ä—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞–≤—ã–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –†–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ idea.md –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
        """
        user_skills = set()
        if user.programming_languages:
            user_skills.update([skill.lower() for skill in user.programming_languages])
        if user.other_competencies:
            user_skills.update([skill.lower() for skill in user.other_competencies])

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã
        courses = db.query(Course).filter(Course.is_active == True).all()
        
        recommended_courses = []
        
        for course in courses:
            course_skills = set()
            if course.skills:
                course_skills.update([skill.lower() for skill in course.skills])
            if course.technologies:
                course_skills.update([tech.lower() for tech in course.technologies])
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ (—á—Ç–æ —É–∂–µ –∑–Ω–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
            skill_intersection = user_skills.intersection(course_skills)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ (—á—Ç–æ –ø–æ–ª—É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
            new_skills = course_skills - user_skills
            
            # –õ–æ–≥–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
            # 1. –ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ (new_skills > 0)
            # 2. –ù–æ –ø—Ä–∏ —ç—Ç–æ–º –∏–º–µ—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—É—é –±–∞–∑—É (–Ω–µ–±–æ–ª—å—à–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è)
            if len(new_skills) > 0:
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞
                relevance_score = len(new_skills) * 1.0 + len(skill_intersection) * 0.3
                recommended_courses.append((course, relevance_score))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        recommended_courses.sort(key=lambda x: x[1], reverse=True)
        
        return [course for course, _ in recommended_courses[:limit]]

    def _detect_career_growth_question(self, message: str) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∑–∞–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–ø—Ä–æ—Å –æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–æ—Å—Ç–µ.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–∞—Ç—å —Å–æ–≤–µ—Ç –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤.
        """
        career_keywords = [
            "–∫–∞—Ä—å–µ—Ä", "—Ä–æ—Å—Ç", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "–ø–æ–≤—ã—Å–∏—Ç—å", "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å—Å—è", 
            "—Å—Ç–∞—Ç—å", "senior", "middle", "junior", "–ø–æ–∑–∏—Ü–∏—è", 
            "–¥–æ–ª–∂–Ω–æ—Å—Ç—å", "–ø–æ–≤—ã—à–µ–Ω–∏–µ", "–ª–µ—Å—Ç–Ω–∏—Ü", "–ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è"
        ]
        
        message_lower = message.lower()
        return any(keyword in message_lower for keyword in career_keywords)

    async def process_chat_message(self, request: AssistantChatRequest, user: User, db: Session) -> AssistantChatResponse:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
        """
        print(f"ü§ñ Processing chat message from user {user.id}: {request.message[:50]}...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile_analysis = self._analyze_user_profile(user)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —á–∞—Ç–∞
        if request.session_id:
            session = db.query(ChatSession).filter(
                ChatSession.id == request.session_id,
                ChatSession.user_id == user.id
            ).first()
        else:
            session = None
            
        if not session:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            session = ChatSession(
                user_id=user.id,
                title=f"–ß–∞—Ç {datetime.now().strftime('%d.%m %H:%M')}",
                context_data=profile_analysis
            )
            db.add(session)
            db.flush()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = ChatMessage(
            session_id=session.id,
            role="user",
            content=request.message
        )
        db.add(user_message)
        db.flush()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if self._detect_career_growth_question(request.message):
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–æ—Å—Ç–µ
            response_data = await self._handle_career_growth_question(user, db, request.message, profile_analysis)
        else:
            # –û–±—â–∏–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            response_data = await self._handle_general_question(user, db, request.message, profile_analysis)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant_message = ChatMessage(
            session_id=session.id,
            role="assistant",
            content=response_data["response"],
            metadata=response_data.get("metadata", {})
        )
        db.add(assistant_message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
        session.last_activity_at = datetime.utcnow()
        
        db.commit()
        
        return AssistantChatResponse(
            session_id=session.id,
            message_id=assistant_message.id,
            response=response_data["response"],
            recommendations=response_data.get("recommendations", []),
            actions=response_data.get("actions", []),
            quick_replies=response_data.get("quick_replies", []),
            response_type=response_data.get("response_type", "general"),
            confidence=response_data.get("confidence")
        )

    async def _handle_career_growth_question(self, user: User, db: Session, message: str, profile_analysis: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–æ—Å—Ç–µ.
        –°–æ–≥–ª–∞—Å–Ω–æ –¢–ó: —Å–æ–≤–µ—Ç—É–µ—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å—ã.
        """
        completeness = profile_analysis["completeness"]
        
        if not completeness["is_complete"]:
            # –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é - —Å–æ–≤–µ—Ç—É–µ–º –¥–æ–∑–∞–ø–æ–ª–Ω–∏—Ç—å
            missing_fields_ru = {
                "first_name": "–∏–º—è",
                "last_name": "—Ñ–∞–º–∏–ª–∏—è", 
                "about": "–æ–ø–∏—Å–∞–Ω–∏–µ \"–æ —Å–µ–±–µ\"",
                "location": "–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                "programming_languages": "—è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                "other_competencies": "–Ω–∞–≤—ã–∫–∏ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏",
                "work_experience": "–æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã",
                "education": "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
            }
            
            missing_list = [missing_fields_ru.get(field, field) for field in completeness["missing_fields"]]
            
            response = f"""–î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –≤–∞—Å! üìä

–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ {completeness['percentage']}%. –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –¥–æ–∑–∞–ø–æ–ª–Ω–∏—Ç—å:

{chr(10).join([f"‚Ä¢ {field}" for field in missing_list[:5]])}

–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —è —Å–º–æ–≥—É:
‚úÖ –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏
‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫—É—Ä—Å—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –Ω—É–∂–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤  
‚úÖ –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å

–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è?"""

            return {
                "response": response,
                "response_type": "profile_completion_required",
                "actions": [
                    {"type": "navigate", "target": "/candidate/profile", "label": "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"}
                ],
                "quick_replies": [
                    "–ü–æ–∫–∞–∂–∏ –º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
                    "–ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –Ω—É–∂–Ω—ã –¥–ª—è Senior?",
                    "–ü–æ–∫–∞–∂–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã"
                ],
                "confidence": 0.9
            }
        else:
            # –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω - –¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é
            courses = await self._recommend_courses(user, db, goal=message)
            vacancies = await self._find_relevant_vacancies(user, db)
            
            course_recommendations = []
            for course in courses[:3]:
                course_recommendations.append({
                    "type": "course",
                    "id": course.id,
                    "title": course.title,
                    "category": course.category,
                    "skills": course.skills[:3] if course.skills else []
                })

            response = f"""–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏! üöÄ

–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, –≤–æ—Ç –º–æ–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:

**üìö –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫—É—Ä—Å—ã:**
{chr(10).join([f"‚Ä¢ {course.title} ({course.category})" for course in courses[:3]])}

**üéØ –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏:**
{chr(10).join([f"‚Ä¢ {vacancy.title}" + (f" ‚Äî {int(similarity*100)}% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ" if similarity > 0.5 else "") for vacancy, similarity in vacancies[:2]])}

**üìà –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**
1. –ü—Ä–æ–π—Ç–∏ –∫–ª—é—á–µ–≤—ã–µ –∫—É—Ä—Å—ã –ø–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º –Ω–∞–≤—ã–∫–∞–º
2. –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –Ω–æ–≤—ã–º–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º–∏  
3. –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
4. –ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è

–•–æ—Ç–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–±—Å—É–¥–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫—É—Ä—Å –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é?"""

            return {
                "response": response,
                "response_type": "career_guidance",
                "recommendations": course_recommendations,
                "actions": [
                    {"type": "navigate", "target": "/candidate/vacancies", "label": "–°–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏"},
                    {"type": "show_courses", "courses": [c.id for c in courses[:3]], "label": "–ò–∑—É—á–∏—Ç—å –∫—É—Ä—Å—ã"}
                ],
                "quick_replies": [
                    "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ Senior –ø–æ–∑–∏—Ü–∏–∏",
                    "–ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ?",
                    "–ü–æ–∫–∞–∂–∏ –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è"
                ],
                "confidence": 0.85
            }

    async def _handle_general_question(self, user: User, db: Session, message: str, profile_analysis: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
        """
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_context = f"""
–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- –ò–º—è: {profile_analysis['basic_info']['name']}
- –ù–∞–≤—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: {', '.join(profile_analysis['skills']['programming_languages']) or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
- –ü—Ä–æ—á–∏–µ –Ω–∞–≤—ã–∫–∏: {', '.join(profile_analysis['skills']['other_competencies']) or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {profile_analysis['experience']['experience_count']} –ø–æ–∑–∏—Ü–∏–π
- –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è: {profile_analysis['completeness']['percentage']}%
- –û —Å–µ–±–µ: {profile_analysis['basic_info']['about'] or '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}
"""

        prompt = f"""
{user_context}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{message}"

–î–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –∫—É—Ä—Å—ã –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.
–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–µ –±–æ–ª–µ–µ 300 —Å–ª–æ–≤.
"""

        try:
            ai_response = await self._call_llm(prompt)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫—É—Ä—Å—ã, –µ—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            courses = await self._recommend_courses(user, db, goal=message)
            course_recommendations = []
            
            if courses:
                course_recommendations = [{
                    "type": "course",
                    "id": course.id,
                    "title": course.title,
                    "category": course.category
                } for course in courses[:2]]

            return {
                "response": ai_response,
                "response_type": "general",
                "recommendations": course_recommendations,
                "quick_replies": [
                    "–ü–æ–∫–∞–∂–∏ –º–æ–∏ –Ω–∞–≤—ã–∫–∏",
                    "–ö–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ?",
                    "–ü–æ–∫–∞–∂–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"
                ],
                "confidence": 0.7
            }
            
        except Exception as e:
            print(f"‚ùå LLM error: {e}")
            # Fallback –æ—Ç–≤–µ—Ç
            return {
                "response": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∫–∞ —á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∫–∞—Ä—å–µ—Ä—ã.",
                "response_type": "fallback",
                "actions": [
                    {"type": "navigate", "target": "/candidate/vacancies", "label": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏"}
                ],
                "confidence": 0.3
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_ai_assistant_service = None

def get_ai_assistant_service() -> AIAssistantService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    global _ai_assistant_service
    if _ai_assistant_service is None:
        _ai_assistant_service = AIAssistantService()
    return _ai_assistant_service
