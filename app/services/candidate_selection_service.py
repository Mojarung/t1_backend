"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò
"""

import json
import re
import httpx
from typing import List, Dict, Any, Optional
from datetime import datetime

from app.config import settings


class CandidateSelectionService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —á–µ—Ä–µ–∑ –ò–ò"""

    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥ —á–∏—Ç–∞–µ–º –∏–∑ settings
        self.provider = ("heroku").lower()

    def _build_request(self, prompt: str) -> tuple[str, Dict[str, str], Dict[str, Any]]:
        """–°–æ–±–∏—Ä–∞–µ—Ç URL, –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ payload –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞."""
        system_prompt = (
            "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π HR-–∞–Ω–∞–ª–∏—Ç–∏–∫ —Å –æ–ø—ã—Ç–æ–º –ø–æ–¥–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞. "
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, "
            "—É—á–∏—Ç—ã–≤–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–∏."
        )

        # Heroku AI Inference (OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)
        url = settings.heroku_ai_base_url or ""
        api_key = settings.heroku_ai_api_key or ""
        model = settings.heroku_ai_model or "gpt-4o-mini"

        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json",
        }
        payload = {
            "model": model,
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt},
            ],
            "max_tokens": 8000,
        }
        return url, headers, payload

    async def call_ai(self, prompt: str) -> str:
        """–í—ã–∑—ã–≤–∞–µ—Ç AI API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (—Å—Ç—Ä–æ–∫–∞)."""
        url, headers, payload = self._build_request(prompt)

        print(f"üîç AI Provider: {self.provider}")
        print(f"üîç Request URL: {url}")
        print(f"üîç Request Headers (masked auth): {{k: ('***' if k.lower()=='authorization' else v) for k,v in headers.items()}}")
        print(f"üîç Request Payload: {payload}")

        async with httpx.AsyncClient(timeout=120.0) as client:
            try:
                response = await client.post(url, headers=headers, json=payload)
                print(f"üîç Response Status: {response.status_code}")
                print(f"üîç Response Headers: {response.headers}")
                print(f"üîç Response Body: {response.text}")

                response.raise_for_status()
                data = response.json()
                # –û–∂–∏–¥–∞–µ–º OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                return data["choices"][0]["message"]["content"]
            except httpx.HTTPStatusError as e:
                print(f"‚ùå HTTP Status Error: {e}")
                print(f"‚ùå Response Text: {e.response.text}")
                raise
            except Exception as e:
                print(f"‚ùå AI Provider API Error: {e}")
                raise

    async def rank_candidates_with_ai(self, vacancy_data: dict, candidates_data: list) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò
        """
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        vacancy_description = f"""
–ù–ê–ó–í–ê–ù–ò–ï: {vacancy_data['title']}
–û–ü–ò–°–ê–ù–ò–ï: {vacancy_data['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–¢–†–ï–ë–û–í–ê–ù–ò–Ø: {vacancy_data['requirements'] or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
–ö–û–ú–ü–ê–ù–ò–Ø: {vacancy_data['company'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
–£–†–û–í–ï–ù–¨ –û–ü–´–¢–ê: {vacancy_data['experience_level'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
–¢–ò–ü –ó–ê–ù–Ø–¢–û–°–¢–ò: {vacancy_data['employment_type'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
–ó–ê–†–ü–õ–ê–¢–ê: {vacancy_data['salary_from'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} - {vacancy_data['salary_to'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
        """.strip()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        candidates_description = ""
        for i, candidate in enumerate(candidates_data, 1):
            candidates_description += f"""
–ö–ê–ù–î–ò–î–ê–¢ {i}:
- –ò–º—è: {candidate['candidate_name']}
- ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {candidate['candidate_id']}
- ID —Ä–µ–∑—é–º–µ: {candidate['resume_id']}
- ID –∏–Ω—Ç–µ—Ä–≤—å—é: {candidate['interview_id']}
- –û—Ç—á–µ—Ç –ø–æ –∏–Ω—Ç–µ—Ä–≤—å—é: {candidate['interview_summary']}
- –ù–∞–≤—ã–∫–∏: {', '.join(candidate['candidate_skills']) if candidate['candidate_skills'] else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –≤ –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã: {len(candidate['candidate_experience']) if candidate['candidate_experience'] else 0}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏: {len(candidate['candidate_education']) if candidate['candidate_education'] else 0}
---
            """.strip()

        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–π –∏—Ö –æ—Ç –ª—É—á—à–µ–≥–æ –∫ —Ö—É–¥—à–µ–º—É –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.

–í–ê–ö–ê–ù–°–ò–Ø:
{vacancy_description}

–ö–ê–ù–î–ò–î–ê–¢–´:
{candidates_description}

–ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò:
1. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–∏
2. –ö–∞—á–µ—Å—Ç–≤–æ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã
3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é (–∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏)
4. –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞–≤—ã–∫–∏
5. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
6. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∫—É–ª—å—Ç—É—Ä–µ

–ó–ê–î–ê–ß–ê:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
2. –û—Ü–µ–Ω–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ç 0.0 –¥–æ 1.0 (–≥–¥–µ 1.0 - –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)
3. –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –æ—Ç –ª—É—á—à–µ–≥–æ –∫ —Ö—É–¥—à–µ–º—É
4. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)

–û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í –§–û–†–ú–ê–¢–ï JSON:
{{
    "ranked_candidates": [
        {{
            "candidate_id": 123,
            "candidate_name": "–ò–º—è –§–∞–º–∏–ª–∏—è",
            "resume_id": 456,
            "interview_id": 789,
            "ranking_score": 0.95,
            "reasoning": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—á–µ–º—É —ç—Ç–æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç –ª—É—á—à–∏–π (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
            "interview_summary": "–û—Ç—á–µ—Ç –ø–æ –∏–Ω—Ç–µ—Ä–≤—å—é"
        }}
    ]
}}

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!
        """

        try:
            ai_response = await self.call_ai(prompt)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            json_match = re.search(r'\{[\s\S]*\}', ai_response)
            if json_match:
                json_str = json_match.group()
                analysis_data = json.loads(json_str)
            else:
                analysis_data = json.loads(ai_response)
            
            return analysis_data
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return self._get_fallback_ranking(candidates_data)

    def _get_fallback_ranking(self, candidates_data: list) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–∫–æ–≤–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ò–ò"""
        import random
        
        ranked_candidates = []
        for candidate in candidates_data:
            # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã –æ—Ç—á–µ—Ç–∞ –ø–æ –∏–Ω—Ç–µ—Ä–≤—å—é
            base_score = min(0.9, len(candidate['interview_summary']) / 1000)
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ä–∞–Ω–¥–æ–º –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            score = base_score + random.uniform(0, 0.1)
            score = min(1.0, score)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏
            if score > 0.8:
                reasoning = "–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–∏, –≤—ã—Å–æ–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é"
            elif score > 0.6:
                reasoning = "–•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è"
            elif score > 0.4:
                reasoning = "–°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"
            else:
                reasoning = "–ù–∏–∑–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–∏"
            
            ranked_candidates.append({
                "candidate_id": candidate['candidate_id'],
                "candidate_name": candidate['candidate_name'],
                "resume_id": candidate['resume_id'],
                "interview_id": candidate['interview_id'],
                "ranking_score": round(score, 2),
                "reasoning": reasoning,
                "interview_summary": candidate['interview_summary'],
                "resume_status": candidate.get('resume_status', 'pending')
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—Ü–µ–Ω–∫–∏
        ranked_candidates.sort(key=lambda x: x['ranking_score'], reverse=True)
        
        return {"ranked_candidates": ranked_candidates}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
candidate_selection_service = None

def get_candidate_selection_service():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
    global candidate_selection_service
    if candidate_selection_service is None:
        candidate_selection_service = CandidateSelectionService()
    return candidate_selection_service
